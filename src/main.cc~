
//  ==========================================================================
/// @file   main.cc
/// @author Yann Kurzo
/// @date   August 8, 2015, 9:32 PM
/// @copyright Copyright 2015 Yann Kurzo. All rights reserved.
///         This project is released under the GNU Public License.
/// @brief  Simple recursive parser to check a string
//  ==========================================================================

#define BOOST_VARIANT_MINIMIZE_SIZE

#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/lex_lexertl.hpp>
#include <boost/spirit/include/phoenix_operator.hpp>
#include <boost/spirit/include/phoenix_statement.hpp>
#include <boost/spirit/include/phoenix_container.hpp>

#include <iostream>
#include <string>

using namespace std;
using namespace boost::spirit;
using namespace boost::spirit::ascii;

// Token definition
enum tokenIDs_e
{
    ID_NUMBER = 1000,
    ID_OPERATOR_PLUS_MINUS
    //ID_WORD,
    //ID_ANY
};

// Define lexer
template <typename Lexer>
struct MyLexer : lex::lexer<Lexer>
{
    MyLexer()
    {
        // Define patterns
        this->self.add_pattern
            ("NUMBER", "-?[0-9]+(.[0-9]*)?")
            ("PLUS_MINUS", "\\+")
        ;

        // Define the tokens
        number = "{NUMBER}";
        operatorPlusMinus = "{PLUS_MINUS}";

        // Add tokens to the lexer
        this->self.add
            (number, ID_NUMBER)
            (operatorPlusMinus, ID_OPERATOR_PLUS_MINUS)
            //(".", ID_ANY)
        ;
    }

    // Declare the tokens
    lex::token_def<double> number;
    lex::token_def<std::string> operatorPlusMinus;
};

// Define parser
template <typename Iterator>
struct MyParser : qi::grammar<Iterator>
{
    // Construct parser
    template <typename TokenDef>
    MyParser(TokenDef const& tok)
        : MyParser::base_type(expression), var(0.0)
    {
        using boost::phoenix::ref;
        using boost::phoenix::size;

        expression = tok.number >>
                     tok.operatorPlusMinus >>
                     tok.number;
                /*qi::token(ID_NUMBER) >> 
                *qi::token(ID_OPERATOR_PLUS_MINUS) >>
                  qi::token(ID_NUMBER));*/
    

    // Variables
    //std::size_t c, w, l;
    double var;

    // Rules
    qi::rule<Iterator> expression;
};

// Main program
int main(int argc, char* argv[])
{
    // Define the token type to be used
    typedef lex::lexertl::token<char const*, boost::mpl::vector<std::string> > token_t;

    // Define the lexer type to use implementing the state machine
    typedef lex::lexertl::lexer<token_t> lexer_t;

    // Define the iterator type exposed by the lexer type
    typedef MyLexer<lexer_t>::iterator_type iterator_t;

    // Create lexer and parser
    MyLexer<lexer_t> myLexer;
    MyParser<iterator_t> myParser(myLexer);

    // Test string
    std::string str(argv[1]);
    char const* first = str.c_str();
    char const* last = &first[str.size()];

    // Lex and parse
    bool r = lex::tokenize_and_parse(first, last, myLexer, myParser);

    // Result
    if (r) {
        std::cout << "Number: " << myParser.var << endl;
    }
    else {
        std::string rest(first, last);
        std::cerr << "Parsing failed\n" << "stopped at: \"" 
                  << rest << "\"\n";
    }

    return 0;
}
